%div.totalinfo
  %h1
    At one glance
    - lh = LoanHistory.sum_outstanding_for(Mfi)
    - lh = lh ? lh.first : nil
    .numbers
      .number
        = Branch.count
        %span.label
          branches
      .number
        = Center.count
        %span.label
          centers
      .number
        = Client.count
        %span.label
          clients
      .number
        = (l = Loan.count(:disbursal_date.not => nil, :rejected_on => nil))
        %span.label
          loans
  %br
    %table
      %tr
        %td
          Active clients
        %td
          = lh.clients_count if lh
        -# %th
        -#   Principal
        -# %td.number
        -#   %h1
        -#     = (cbc.principal_due + cbc.principal_paid).to_currency(:mostfit_default)
        -#     - total[:due] += cbc.principal_due
        -# %td.number
        -#   %h1.green
        -#     = cbc.principal_paid.to_currency(:mostfit_default)
        -#     - total[:paid] += cbc.principal_paid
        -# %td.number
        -#   %h1.red
        -#     = cbc.principal_due.to_currency(:mostfit_default)
      %tr
        -# %th
        -#   Interest
        -# %td.number
        -#   %h1
        -#     = (cbc.interest_due + cbc.interest_paid).to_currency(:mostfit_default)
        -#     - total[:due] += cbc.interest_due
        -# %td.number
        -#   %h1.green
        -#     = cbc.interest_paid.to_currency(:mostfit_default)
        -#     - total[:paid] += cbc.interest_paid
        -# %td.number
        -#   %h1.red
        -#     = cbc.interest_due.to_currency(:mostfit_default)
        %td
          Attendance %
        %td{:colspan => 3}
          - absent_count = Attendance.all(:status => "absent").count.to_f
          - total_count = Attendance.all.count.to_f
          - attendance = (1 - (absent_count/total_count))*100
          - if attendance > 0
            = (attendance).round(2)
          - else
            = "-"
      %tr
        %td
          Closed/repaid loans (number)
        %td{:colspan => 3}
          = (l - lh.loans_count) if lh
    -#     %th
    -#       Fees
    -#     %td.number
    -#       %h1
    -#         = (cbc.fees_due_today + cbc.fees_paid_today).to_currency(:mostfit_default)
    -#         - total[:due] += cbc.fees_due_today
    -#     %td.number
    -#       %h1.green
    -#         = cbc.fees_paid_today.to_currency(:mostfit_default)
    -#         - total[:paid] += cbc.fees_paid_today
    -#     %td.number
    -#       %h1.red
    -#         = cbc.fees_due_today.to_currency(:mostfit_default)
    -#   %tr.total
    -#     %th
    -#       Total
    -#     %td.number
    -#       %h1
    -#         = (total[:due] + total[:paid]).to_currency(:mostfit_default)
    -#     %td.number
    -#       %h1.green
    -#         = total[:paid].to_currency(:mostfit_default)
    -#     %td.number
    -#       %h1.red
    -#         = total[:due].to_currency(:mostfit_default)
    -# %thead
    -#   %tr.selected
    -#     %th{:colspan => 4}
    -#       %h1 total
    -#   %tr
    -#     %th &nbsp;
    -#     %th Due
    -#     %th Paid
    -#     %th Balance
 
    %tr
      -# %th
      -#   Principal
      -# %td.number
      -#   %h1
      -#     = (cbc.total_principal_due + cbc.total_principal_paid).to_currency(:mostfit_default)
      -# %td.number
      -#   %h1
      -#     = cbc.total_principal_paid.to_currency(:mostfit_default)
      -# %td.number
      -#   %h1
      -#     = cbc.total_principal_due.to_currency(:mostfit_default)
      %td
        Loans disbursed (amount)
      %td{:colspan => 3}
        = Loan.all(:disbursal_date.not => nil, :rejected_on => nil).aggregate(:amount.sum).to_currency
    %tr
      -# %th
      -#   Interest
      -# %td.number
      -#   %h1
      -#     = (cbc.total_interest_due + cbc.total_interest_paid).to_currency(:mostfit_default)
      -# %td.number
      -#   %h1
      -#     = cbc.total_interest_paid.to_currency(:mostfit_default)
      -# %td.number
      -#   %h1
      -#     = cbc.total_interest_due.to_currency(:mostfit_default)
      %td
        Amount outstanding
      %td{:colspan => 3}
        = lh.actual_outstanding_principal.to_currency if lh
    %tr
    -#   %th
    -#     Fees
    -#   %td.number
    -#     %h1
    -#       = (cbc.total_fees_due + cbc.total_fees_paid).to_currency(:mostfit_default)
    -#   %td.number
    -#     %h1
    -#       = cbc.total_fees_paid.to_currency(:mostfit_default)
    -#   %td.number
    -#     %h1
    -#       = cbc.total_fees_due.to_currency(:mostfit_default)
    -# %tr.total
    -#   %td.number
    -#     %h1
    -#       == #{Branch.all.count} 
    -#     branches
    -#   %td.number
    -#     %h1
    -#       == #{Center.all.count} 
    -#     centers
    -#   %td.number
    -#     %h1
    -#       == #{Client.all.count.to_currency(:mostfit_default)} 
    -#     clients
    -#   %td.number
    -#     %h1
    -#       == #{Loan.all.count.to_currency(:mostfit_default)} 
    -#     loans
      %td
        Receipts
      %td{:colspan => 3}
        %table
          %tr
            %td.text
              Principal
            %td.number
              - principal_repaid = Payment.all(:type => :principal).aggregate(:amount.sum) || 0
              = principal_repaid.to_currency
          %tr
            %td.text
              Interest
            %td.number
              - interest = Payment.all(:type => :interest).aggregate(:amount.sum) || 0
              = interest.to_currency
          %tr
            %td.text
              Fees
            %td.number
              - fees = Payment.all(:type => :fees).aggregate(:amount.sum) || 0
              = fees.to_currency
          %tr
            %td.text
              Total receipts
            %td.number
              = (principal_repaid + interest + fees).to_currency
          %tr
            %td
              Staff count
            %td
              = StaffMember.all(:active => true).count
          %tr
            %td
              Regions
            %td{:colspan => 3}
              = Region.count
          %tr
            %td
              Areas
            %td{:colspan => 3}
              = Area.count

  %span.greytext{:style => "float: right"}
    as of yesterday