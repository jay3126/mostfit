%div.totalinfo
  %h1
    = Mfi.first.name
    At a glance
  .numbers
    - location_facade = FacadeFactory.instance.get_instance(FacadeFactory::LOCATION_FACADE, User.first)
    - reporting_facade = FacadeFactory.instance.get_instance(FacadeFactory::REPORTING_FACADE, User.first)
    .number
      = LocationLevel.first.biz_locations.count
      %span.label
        = LocationLevel.first.name.pluralize
    .number
      = LocationLevel.get(2).biz_locations.count
      %span.label
        = LocationLevel.get(2).name.pluralize
    .number  
      = Client.count
      %span.label
        clients
    .number
      = Lending.count
      %span.label
        loans
  %br
  %table
    %tr
      %td
        Active clients
      %td
        = Client.all(:active => true).count
    %tr
      %td
        Closed/repaid loans (number)
      %td{:colspan => 3}
        = Lending.all(:status => [:written_off_loan_status, :repaid_loan_status]).count

    %tr
      %td
        Loans Applied
      %td{:colspan => 3}
        %table
          %tr
            %td.text
              Count
            %td.number
              - loans_applied = reporting_facade.aggregate_loans_for_status(:applied, Date.today)
              = loans_applied[:count]
          %tr
            %td.text
              Amount
            %td.number
              = loans_applied[:total_amount]

    %tr
      %td
        Loans Approved
      %td{:colspan => 3}
        %table
          %tr
            %td.text
              Count
            %td.number
              - loans_approved = reporting_facade.aggregate_loans_for_status(:approved, Date.today)
              = loans_approved[:count]
          %tr
            %td.text
              Amount
            %td.number
              = loans_approved[:total_amount]

    %tr
      %td
        Loans Disbursed
      %td{:colspan => 3}
        %table
          %tr
            %td.text
              Count
            %td.number
              - loans_disbursed = reporting_facade.aggregate_loans_for_status(:disbursed, Date.today)
              = loans_disbursed[:count]
          %tr
            %td.text
              Amount
            %td.number
              = loans_disbursed[:total_amount]
    %tr
      %td
        Amount outstanding
      %td{:colspan => 3}
        - amount_outstanding = reporting_facade.sum_all_outstanding_loans
        = amount_outstanding.to_s
    %tr
      %td
        Receipts
      %td{:colspan => 3}
        %table
          %tr
            %td.text
              Principal
            %td.number
              - repayments = reporting_facade.sum_all_repayments
              = repayments[:principal_received]
          %tr
            %td.text
              Interest
            %td.number
              = repayments[:interest_received]
          %tr
            %td.text
              Fees
            %td.number
              - fee_received = reporting_facade.sum_all_fee_receipts
              = fee_received[:fee_receipt]
          %tr
            %td.text
              Total
            %td.number
              = repayments[:total_received]
    %tr
      %td
        Advances
      %td{:colspan => 3}
        %table
          %tr
            %td.text
              Received
            %td.number
              = repayments[:advance_received]
          %tr
            %td.text
              Adjusted
            %td.number
              = repayments[:advance_adjusted]
    %tr
      %td
        Write-Off Amounts
      %td
        - amounts = reporting_facade.sum_all_pre_closure_and_write_off_payments
        = amounts[:written_off_amount]

    %tr
      %td
        Pre-Closure Amounts
        %td
          = amounts[:pre_closure_amount]
              
    %tr
      %td
        Staff count
      %td
        = StaffMember.all(:active => true).count

    - if LocationLevel.count > 2
      - last_location_level_id = LocationLevel.last.id
      - for location_level in (3..last_location_level_id)
        %tr
          %td
            = LocationLevel.get(location_level).name.pluralize
          %td{:colspan => 3}
            = (LocationLevel.get(location_level) and LocationLevel.get(location_level).biz_locations) ? LocationLevel.get(location_level).biz_locations.count : "Not Specified"

  %span.greytext{:style => "float: right"}
    %b as of yesterday