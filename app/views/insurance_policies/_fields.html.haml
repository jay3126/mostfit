- if @insurance_policy and @insurance_policy.id and not @insurance_policy.id.blank?
  = hidden_field :id
%table
  %tr
    %td
      Insurance Product
    %td
      - if defined? :product_fixed? and @insurance_policy.insurance_product
        = @insurance_policy.insurance_product.name
        = hidden_field :insurance_product_id, :value => @insurance_policy.insurance_product.id
      - else
        = select :insurance_product_id, :collection => InsuranceProduct.all, :prompt => "---", :value_method => :id, :text_method => :name
        = link_to 'Add a product', resource(:insurance_products, :new, {:return => (@client ? resource(@client, :insurance_policies, :new) : nil)}), :class => "_remote_ grey_button", :style => "margin: 0px; padding-right: 6px; padding-left: 6px; padding-top: 1px; padding-bottom: 1px;"
  %tr
    %td
      Policy Number
    %td
      = text_field :policy_no
  %tr
    %td
      Application number
    %td
      = text_field :application_number
  %tr
    %td
      Sum Insured
    %td
      = text_field :sum_insured
  %tr
    %td
      Premium
    %td
      = text_field :premium
  %tr
    %td
      Date from
    %td
      = date_select_for(@insurance_policy, "date_from", :date => @insurance_policy.date_from, :min_date => Date.new(2012, 9, 27))
  %tr
    %td
      Date to
    %td
      = date_select_for(@insurance_policy, "date_to", :date => @insurance_policy.date_to, :min_date => Date.new(2012, 9, 27), :max_date => Date.today + 3650)
      = hidden_field :client_id, :value => @client.id
  %tr
    %td
      Status
    %td
      = select(:status, :collection => InsurancePolicy::POLICY_STATUSES.map{|x| [x, x]})
  %tr
    %td
      Cover for
    %td
      = select(:cover_for, :collection => InsurancePolicy::COVER_FOR.map{|x| [x, x]}, :prompt => "Select the cover for insurance policy")
  %tr
    %td
      Beneficiary Name
    %td
      = text_field :beneficiary_name
