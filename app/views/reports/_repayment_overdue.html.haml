= partial :form
%table.report
  %tr.header
    %th{:colspan => "2"}
      Client
    %th
      Disbursal
    %th
      Scheduled 1st 
    %th
      Installment
    %th
      Disbursed
    %th{:colspan => "4"}
      Repayments
    %th{:colspan => "3"}
      Balance Outstanding
    %th{:colspan => "4"}
      Overdue Repayment
  %tr.header
    %th
      ID
    %th
      Name
    %th
      Date
    %th
      Payment Date
    %th
      Amount
    %th
      Amount
    %th
      Principal
    %th
      Interest
    %th
      Fee
    %th
      Total
    %th
      Principal
    %th
      Interest
    %th
      Total
    %th
      Principal
    %th
      Interest
    %th
      Fee
    %th
      Total
  - center_id, branch_id = nil, nil
  - length = 17
  - org_total = []
  - summable_columns = [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
  - loan_products = LoanProduct.all.map{|lp| [lp.id, lp]}.to_hash
  - @data.sort_by{|branch, centers| branch.name}.each do |branch, centers|
    - branch_wise_client_count = 0   
    - if centers.keys.length > 0
      - branch_total = []
      %tr.branch
        %td{:colspan => length}
          %b
            = branch.name
      - centers.sort_by{|center, clients| center.name}.each do |center, clients|
        - center_wise_client_count = 0 
        - if clients.length>0
          %tr.center
            %td{:colspan => length}
              %b
                = center.name
          - center_total = Array.new(summable_columns.length, 0)
          - clients.sort_by{|client, rows| client}.each do |client, rows|
            - rows.each do |row|
              %tr.group
                %td
                  = client.id
                %td
                  - center_wise_client_count += 1
                  - branch_wise_client_count += 1
                  = client.name
                - loan = Loan.get(row[0])
                %td
                  = loan.disbursal_date
                %td
                  = loan.scheduled_first_payment_date
                %td
                  = loan.scheduled_principal_for_installment(1) + loan.scheduled_interest_for_installment(1)
                - row[1..-1].each_with_index do |d, idx|
                  %td
                    = d.to_currency
                - center_total << [row[1], row[2], row[3], row[4], row[5], row[6], row[7], row[8], row[9], row[10], row[11], (row[9] + row[10] + row[11])]
                %td
                  = (row[9] + row[10] + row[11]).to_currency
          %tr.center_total
            %td
              %b==Center total:

            %td
              = center_wise_client_count
            - branch_total.push(center_total.reject{|x| x.class!=Array}.transpose.collect{|x| x.inject(0){|sum, x| sum+=x}})
            - 1.upto(length-2).each do |col|
              %td
                - if summable_columns.include?(col)
                  %b
                    = branch_total.last[summable_columns.index(col)].to_currency
      %tr.branch_total
        %td
          %b==Branch total:
        %td
          = branch_wise_client_count
        - branch_total = branch_total.reject{|x| x.class!=Array or (x.class==Array and x.length==0)}.transpose.collect{|x| x.reduce{|sum, x| sum+=x}}
        - org_total << branch_total
        - if branch_total.length>0
          - 1.upto(length-2).each do |col|
            %td
              - if summable_columns.include?(col)
                %b
                  = branch_total[summable_columns.index(col)].to_currency
  %tr.org_total
    %td
      %b==Total:
    %td
    - org_total = org_total.reject{|x| x.class!=Array or (x.class==Array and x.length==0)}.transpose.collect{|x| x.reduce{|sum, x| sum+=x}}
    - 1.upto(length-2).each do |col|
      %td
        - if summable_columns.include?(col)
          %b
            = org_total[summable_columns.index(col)] ? org_total[summable_columns.index(col)].to_currency : 0
      
