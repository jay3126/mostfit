= error_messages_for @report
- unless params[:layout] 
  - report = @report.class.to_s.snake_case
  - area_id = (params[report] and params[report][:area_id] and not params[report][:area_id].blank?) ? params[report][:area_id] : nil
  - combo_branches = (params[report] and params[report][:combo_branches] and not params[report][:combo_branches].blank?) ? params[report][:combo_branches] : nil
  - branch_id = (params[report] and params[report][:branch_id] and not params[report][:branch_id].blank?) ? params[report][:branch_id] : nil
  - center_id = (params[report] and params[report][:center_id] and not params[report][:center_id].blank?) ? params[report][:center_id] : nil
  - loan_product_id = (params[report] and params[report][:loan_product_id] and not params[report][:loan_product_id].blank?) ? params[report][:loan_product_id] : nil
  - staff_member_id = (params[report] and params[report][:staff_member_id] and not params[report][:staff_member_id].blank?) ? params[report][:staff_member_id] : nil
  - funder_id = (params[report] and params[report][:funder_id] and not params[report][:funder_id].blank?) ? params[report][:funder_id] : nil
  - funding_line_id = (params[report] and params[report][:funding_line_id] and not params[report][:funding_line_id].blank?) ? params[report][:funding_line_id] : nil
  - securitization_id = (params[report] and params[report][:securitization_id] and not params[report][:securitization_id].blank?) ? params[report][:securitization_id] : nil
  - account_id = (params[report] and params[report][:account_id] and not params[report][:account_id].blank?) ? params[report][:account_id] : nil
  - type_of_target = (params[report] and params[report][:type_of_target] and not params[report][:type_of_target].blank?) ? params[report][:type_of_target] : nil
  - type_of_journal = (params[report] and params[report][:type_of_journal] and not params[report][:type_of_journal].blank?) ? params[report][:type_of_journal] : nil
  - month = (params[report] and params[report][:month] and not params[report][:month].blank?) ? params[report][:month] : nil
  - period = (params[report] and params[report][:period] and not params[report][:period].blank?) ? params[report][:period] : nil
  - chosen_year = (params[report] and params[report][:chosen_year] and not params[report][:chosen_year].blank?) ? params[report][:chosen_year] : nil
  - cash_account = (params[report] and params[report][:cash_account] and not params[report][:cash_account].blank?) ? params[report][:cash_account] : nil
  - bank_account = (params[report] and params[report][:bank_account] and not params[report][:bank_account].blank?) ? params[report][:bank_account] : nil
  - loan_cycle = (params[report] and params[report][:loan_cycle] and not params[report][:loan_cycle].blank?) ? params[report][:loan_cycle] : nil
  - loan_application_status = (params[report] and params[report][:loan_application_status] and not params[report][:loan_application_status].blank?) ? params[report][:loan_application_status] : nil
  - loan_file_status = (params[report] and params[report][:loan_file_status] and not params[report][:loan_file_status].blank?) ? params[report][:loan_file_status] : nil
  - biz_location_branch = (params[report] and params[report][:biz_location_branch] and not params[report][:biz_location_branch].blank?) ? params[report][:biz_location_branch] : nil
  - branch_for_loan_application_report = (params[report] and params[report][:branch_for_loan_application_report] and not params[report][:branch_for_loan_application_report].blank?) ? params[report][:branch_for_loan_application_report] : nil
  - center_for_loan_application_report = (params[report] and params[report][:center_for_loan_application_report] and not params[report][:center_for_loan_application_report].blank?) ? params[report][:center_for_loan_application_report] : nil
  - if params[:submit]
    %h3{:style => "margin-bottom: 5px;"}
      - if area_id
        Area:
        = Area.get(area_id).name
      - if combo_branches
        |
        Branch:
        = Branch.get(combo_branches).name
      - if branch_id
        Branch:
        = Branch.get(branch_id).name
      - if center_id
        |
        Center: 
        = Center.get(center_id).name
      - if loan_product_id
        |
        Product: 
        = LoanProduct.get(loan_product_id).name
      - if staff_member_id
        |
        Staff: 
        = StaffMember.get(staff_member_id).name
      - if funder_id
        |
        Funder:
        = Funder.get(funder_id).name
      - if funding_line_id
        |
        Funding Line:
        = FundingLine.get(funding_line_id).name
      - if securitization_id
        |
        Securitization:
        = Securitization.get(securitization_id).name
      - if account_id
        |
        Account:
        = Account.get(account_id).name
      - if type_of_target
        |
        Target Type:
        = params[report][:type_of_target].to_s.camelcase
      - if type_of_journal
        |
        Journal Type:
        = JournalType.get(type_of_journal).name
      - if month
        |
        Month:
        = MONTHS[month.to_i]
      - if period
        |
        Period:
        = AccountingPeriod.get(period).to_s
      - if chosen_year
        |
        Year:
        = chosen_year
      - if cash_account
        |
        Account:
        = Account.get(cash_account).name
      - if bank_account
        |
        Account:
        = Account.get(bank_account).name
      - if loan_cycle
        |
        Loan Cycle:
        = params[report][:loan_cycle]
      - if loan_application_status
        |
        Loan Application Status:
        = params[report][:loan_application_status]
      - if loan_file_status
        |
        Loan File Status:
        = params[report][:loan_file_status]
      - if biz_location_branch
        Branch:
        = BizLocation.get(biz_location_branch).name
    %a.expand_collapsed{:href => "#"}
      Change parameters
  %div{:class => "#{params[:submit] ? 'collapsed':''}"}
    = form_for(@report, :action => url(:show_report, :report_type => params[:report_type]), :method => :get, :class => "_disable_button_") do
      %table
        %tr
          - if @report.respond_to?(:from_date)
            %td
              From:
              = date_select_for(@report, "from_date", :date => @report.from_date)
          - if @report.respond_to?(:to_date)
            %td
              To:
              = date_select_for(@report, "to_date", :date => @report.to_date)
          - if @report.respond_to?(:date)
            %td
              Date:
              = date_select_for(@report, "date", :date => @report.date)
          - if @report.respond_to?(:loan_product_id)
            %td
              Product:
              = select(:loan_product_id, :collection => LoanProduct.all.map{|x| [x.id, x.name]}, :include_blank => true, :selected => loan_product_id)
          - if @report.respond_to?(:late_by_more_than_days)
            %td
              Late by more than:
              = text_field(:late_by_more_than_days, :size => 10)
              days
          - if @report.respond_to?(:late_by_less_than_days)
            %td
              Late by less than:
              = text_field(:late_by_less_than_days, :size => 10)
              days
          - if @report.respond_to?(:attendance_status)
            - attendance_status_list = Attendance.attendancy_states.map{|a| [(Attendance.attendancy_states.index(a)+1), a.to_s]}
            /- attendance_status_list.delete(attendance_status_list.first)
            %td
              = select(:attendance_status, :collection => attendance_status_list)
          - if @report.respond_to?(:more_than)
            %td
              by more than:
              = text_field(:more_than, :size => 3)
          - if @report.respond_to?(:days_percentage)
            %td
              = select(:days_percentage, :collection => [[1, "days"], [2, "%"]])
          - if @report.respond_to?(:month)
            %td
              Month:
              = select(:month, :collection => MONTHS.map{|m| [MONTHS.index(m), m.to_s]}, :selected => month)
          - if @report.respond_to?(:period)
            %td
              Period:
              = select(:period, :collection => AccountingPeriod.all.map {|p| [p.id, p.name]}, :selected => period)
          - if @report.respond_to?(:chosen_year)
            %td
              Year:
              = select(:chosen_year, :collection => ["2010", "2011"])
      %table{:style => "padding-top: 0px;"}
        %tr
          - if @report.respond_to?(:loan_application_status)
            %td
              Loan Application Status:
              = select(:loan_application_status, :collection => Constants::Status::LOAN_APPLICATION_STATUSES.collect{|s| s.to_s.humanize}, :selected => loan_application_status, :include_blank => true, :id => "loan_application_status_selector")
          - if @report.respond_to?(:loan_file_status)
            %td
              Loan File Status:
              = select(:loan_file_status, :collection => Constants::Status::HEALTH_CHECK_STATUSES.collect{|s| s.to_s.humanize}, :selected => loan_file_status, :include_blank => true, :id => "loan_file_status_selector")
          - if @report.respond_to?(:area_id)
            %td
              Area:
              = select(:area_id, :collection => get_accessible_areas(@staff), :value_method => :id, :text_method => :name, :include_blank => true, :selected => area_id, :id => "area_selector")
          - if @report.respond_to?(:combo_branches)
            %td
              Branch:
              = select(:combo_branches, :collection => get_accessible_combo_branches(area_id), :include_blank => true, :selected => combo_branches, :id => "combo_branch_selector")
          - if @report.respond_to?(:branch_id)
            %td
              Branch:
              = select(:branch_id , :collection => get_accessible_branches(@staff), :value_method => :id, :text_method => :name, :include_blank => true, :selected => branch_id, :id => "branch_selector")
          - if @report.respond_to?(:center_id)
            %td
              Center:          
              = select(:center_id , :collection => get_accessible_centers(branch_id, @staff), :include_blank => true, :selected => center_id, :id => "center_selector")
          - if @report.respond_to?(:staff_member_id)
            %td
              Staff member:
              = select(:staff_member_id , :collection => get_accessible_staff_members(@staff), :include_blank => true, :selected => staff_member_id)
          - if @report.respond_to?(:funder_id)
            %td
              Funder:
              = select(:funder_id , :collection => get_accessible_funders(@user), :include_blank => true, :selected => funder_id, :id => "funder_selector")
          - if @report.respond_to?(:funding_line_id)
            %td
              Funding Line:
              = select(:funding_line_id, :collection => get_accessible_funding_lines(funder_id, @user), :include_blank => true, :selected => funding_line_id, :id => "funding_line_selector")
          - if @report.respond_to?(:securitization_id)
            %td
              Securitization:
              = select(:securitization_id, :collection => Securitization.all.map{|x| [x.id, x.name]}, :include_blank => true, :selected => securitization_id, :id => "securitization_selector")
          - if @report.respond_to?(:account_id)
            %td
              Account:
              = select(:account_id, :collection => get_accessible_accounts(branch_id), :include_blank => true, :selected => account_id, :id => "account_selector")
          - if @report.respond_to?(:include_past_data)
            %td
              Include past data ?
              = check_box(:name => "#{report}[include_past_data]", :value => "1", :checked => (params[report] and params[report].key?(:include_past_data) and params[report][:include_past_data] == "1" ? true : false))
          - if @report.respond_to?(:include_unapproved_loans)
            %td
              Include unapproved loans ?
              = check_box(:name => "#{report}[include_unapproved_loans]", :value => "1", :checked => (params[report] and params[report].key?(:include_unapproved_loans) and params[report][:include_unapproved_loans] == "1" ? true : false))
          - if @report.respond_to?(:group_by_types)
            %td
              Group by:
              = select(:name => "#{report}[group_by_types]", :selected => (params[report] and params[report][:group_by_types]), :collection => @report.group_types.map{|name, gt| [name, name.to_s.camelcase(" - ")]}.sort_by{|name, gt| gt}, :prompt => "select grouping")
          - if @report.respond_to?(:ageing_interval)
            %td
              Ageing intervals:
              - ages = ["3", "5", "10"]
              = select(:ageing_interval, :collection => ages, :prompt => "select ageing multiple")
          - if @report.respond_to?(:type_of_target)
            %td
              Target Type:
              - types = ["relative", "absolute"]
              = select(:type_of_target, :collection => types.map{|x| [x.to_s.camelcase(' '), x.to_s]}, :text_method => :first, :value_method => :last)
          - if @report.respond_to?(:type_of_journal)
            %td
              Journal Type:
              = select(:type_of_journal, :collection => JournalType.all.map{|m| [m.id, m.name]}, :prompt => "All Journal Types", :selected => type_of_journal, :include_blank => true)
          - if @report.respond_to?(:cash_account)
            %td
              Account:
              = select(:cash_account, :collection => get_accessible_cash_accounts(branch_id), :include_blank => true, :selected => cash_account, :id => "cash_account_selector")
          - if @report.respond_to?(:bank_account)
            %td
              Account:
              = select(:bank_account, :collection => get_accessible_bank_accounts(branch_id), :include_blank => true, :selected => bank_account, :id => "bank_account_selector")
          - if @report.respond_to?(:biz_location_branch)
            %td
              Branch:
              - location_facade = FacadeFactory.instance.get_instance(FacadeFactory::LOCATION_FACADE, @user)
              - branch_collection = location_facade.all_nominal_branches
              = select(:biz_location_branch, :collection => branch_collection, :value_method => :id, :text_method => :name, :include_blank => true)
          - if @report.respond_to?(:branch_for_loan_application_report)
            %td
              Branch:
              = select(:branch_for_loan_application_report, :collection => get_all_nominal_branches, :value_method => :id, :text_method => :name, :include_blank => true, :id => "parent_selector", :selected => branch_for_loan_application_report)
          - if @report.respond_to?(:center_for_loan_application_report)
            %td
              Center:
              = select(:center_for_loan_application_report, :collection => get_all_nominal_centers(branch_for_loan_application_report), :value_method => :id, :text_method => :name, :include_blank => true, :id => "child_selector", :selected => center_for_loan_application_report)
          - if @report.respond_to?(:effective_date)
            %td
              %input{:type => :hidden, :value => get_effective_date, :name => 'effective_date', :id => 'effective_date_id'}
      %table{:style => "padding-top: 0px;"}
        %tr
          - if @report.respond_to?(:loan_cycle)
            Loan Cycle:
            - lc = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]
            = select(:loan_cycle, :collection => lc, :prompt => "select loan cycle")
          %td
            - if @report.respond_to?(:report_by_loan_disbursed)
              = check_box(:name => "#{report}[report_by_loan_disbursed]", :value => "1", :checked => (params[report] and params[report].key?(:report_by_loan_disbursed) and params[report][:report_by_loan_disbursed] == "1" ? true : false))
              Show loans disbursed during selected date range only
            - if @report.respond_to?(:report_by_loans_created)
              = check_box(:name => "#{report}[report_by_loans_created]", :value => "1", :checked => (params[report] and params[report].key?(:report_by_loans_created) and params[report][:report_by_loans_created] == "1" ? true : false))
              Report by Loans Created


        %tr
          %td
            %div{:style => "float: left"}
              = hidden_field :name => "submit", :value => "go"
              = submit "Generate", :name => "submit_button", :value => "submit"
