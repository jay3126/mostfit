:javascript
  function calculate_totals(){
    $('#total_pi_due').html(parseFloat($('#outstanding_principal').val()) + parseFloat($('#total_interest_due').val()));
    $('#total_due').html(parseFloat($('#outstanding_principal').val()) + parseFloat($('#total_interest_due').val()) + parseFloat($('#penalty_amount').val()));    
  }
  calculate_totals();
  $('#total_interest_due').change(function(){calculate_totals();});
  $('#penalty_amount').focusout(function(){calculate_totals();});
  
%div.box#repayment_form
  - unless params[:date]
    .help{:style => "width: 75%"}
      Please tell us the date you wish to prepay this loan as of, so we can calculate the correct amounts.
    %b Prepay date
    = form_for(@loan, :action => url(:controller => 'loans', :action => :prepay, :id => @loan.id), :method => :get, :class => "_remote_ _disable_button_") do
      = date_select(:date)
      %input{:type => "hidden", :name => "_target_", :value => "repayment_form"}
      = submit "Submit"
  - else
    - @date = Date.parse(params[:date])
    - os_prin = (@loan.actual_outstanding_principal_on(@date))
    - os_int = (@loan.actual_outstanding_interest_on(@date))
    - info = @loan.info(@date)
    - missed_int = info.total_interest_due - info.total_interest_paid
    - accrued_int = @date > info.date ? info.actual_outstanding_principal * @loan.interest_rate * ((@date - info.date) - 1) / 365 : 0
    - allow_override_principal = false
    - allow_override_interest = true
    - allow_override_penalty = true
    - total_due = 0
    - total_pi_due = 0
    %h2
      Loan id
      = @loan.id
      (
      = @loan.description
      ) for client
      = @loan.client.name
      ==. Prepaying on 
      = @date
    
    = form_for(@loan, :action => url(:controller => 'loans', :action => :prepay, :id => @loan.id), :class => "_disable_button_") do
      %table
        %tr
          %th
            Outstanding Principal
          %td
            = os_prin
            - outstanding_principal = os_prin
            = hidden_field :name => "outstanding_principal", :value => outstanding_principal, :id => "outstanding_principal"
          %td
            - if allow_override_principal
              = text_field :name => :principal, :value => os_prin.round(2)
            - else
              = os_prin.to_currency
              = hidden_field :name => :principal, :value => os_prin.round(2)
            = hidden_field :name => "date", :value => @date
        %tr
          %th
            Outstanding Interest
          %td
            missed interest payments = 
            = missed_int.to_currency
            %br
            accrued interest since 
            = info.date
            == = #{accrued_int.to_currency}
            %br
            %b
              Total Interest Due
              - total_interest_due = (missed_int + accrued_int)
              = total_interest_due.to_currency
            %br
            Remaining Interest
            = os_int.to_currency
          %td
            - if allow_override_interest
              = text_field :name => :interest, :value => total_interest_due.round(2), :id => "total_interest_due"
            - else
              = total_interest_due.to_currency
              = hidden_field :name => :interest, :value => total_interest_due.round(2), :id => "total_interest_due"
        %tr.total
          %th
            Total P and I due
          %td
          %td#total_pi_due
            /- total_pi_due = (missed_int + accrued_int + os_prin)
            /= (total_pi_due).to_currency
        %tr
          %th
            Penalty
          %td
            - if @loan.loan_product.fees(:payable_on => :penalty).empty?
              = "No Penalty fees applicable on this loan product"
            - else
              - @loan.loan_product.fees(:payable_on => :penalty).each do |f|
                = f.name
          %td
            - if @loan.loan_product.fees(:payable_on => :penalty).empty?
              = hidden_field :name => "dummy_fees", :value => 0, :id => "penalty_amount"
              = "---"
            - else
              - @loan.loan_product.fees(:payable_on => :penalty).each do |f|
                - fee_amt = f.amount_for(@loan, @date)
                - total_due = total_pi_due + fee_amt
                - if allow_override_penalty
                  = text_field :name => "fees[#{f.id}]", :value => fee_amt, :id  => "penalty_amount"
                - else
                  = fee_amt
                  = hidden_field :name => "fees[#{f.id}]", :value => fee_amt, :id => "penalty_amount"
        %tr.total
          %th
            Total Due
          %td
          %td#total_due
            /= (total_due).to_currency
        %tr
          %th
            Received By
          %td
            = select :name => "received_by", :collection => staff_members_collection
        %tr
          %th
            Preclose?
          %td
            = check_box :name => "writeoff"
            .greytext
              If you want to close the loan before its intended/scheduled tenure it is recommended to preclose the loan.<br> <br> If the repaid amount is less than the outstanding amount it is recommended to write off the loan.<br> To write off the loan, please scroll down the screen
      = submit 'Make Prepayment', :class => "grey_button"